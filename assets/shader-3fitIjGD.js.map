{"version":3,"file":"shader-3fitIjGD.js","sources":["../../src/shaders/ragingSea/vertex.glsl","../../src/shaders/ragingSea/fragment.glsl","../../src/shaders/ragingSea/shader.jsx"],"sourcesContent":["uniform float uTime;\nuniform float uBigWavesElevation;\nuniform vec2 uBigWavesFrequency;\nuniform float uBigWavesSpeed;\n\nuniform float uSmallWavesElevation;\nuniform float uSmallWavesFrequency;\nuniform float uSmallWavesSpeed;\nuniform float uSmallIterations;\n\nvarying float vElevation;\nvarying vec3 vNormal;\nvarying vec3 vPosition;\n\n#include ../includes/perlinClassic3D.glsl\n\nfloat waveElevation(vec3 position)\n{\n    float elevation = sin(position.x * uBigWavesFrequency.x + uTime * uBigWavesSpeed) *\n                      sin(position.z * uBigWavesFrequency.y + uTime * uBigWavesSpeed) *\n                      uBigWavesElevation;\n\n    for(float i = 1.0; i <= uSmallIterations; i++)\n    {\n        elevation -= abs(perlinClassic3D(vec3(position.xz * uSmallWavesFrequency * i, uTime * uSmallWavesSpeed)) * uSmallWavesElevation / i);\n    }\n\n    return elevation;\n}\n\nvoid main()\n{\n    // Base position\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n\n    float shift = 0.01;\n    vec3 modelPositionA = modelPosition.xyz + vec3(shift, 0.0, 0.0);\n    vec3 modelPositionB = modelPosition.xyz + vec3(0.0, 0.0, - shift);\n\n    // Elevation\n    float elevation = waveElevation(modelPosition.xyz);\n    float elevationA = waveElevation(modelPositionA);\n    float elevationB = waveElevation(modelPositionB);\n    \n    modelPosition.y += elevation;\n    modelPositionA.y += elevationA;\n    modelPositionB.y += elevationB;\n\n    // Compute normal\n    vec3 toA = normalize(modelPositionA - modelPosition.xyz);\n    vec3 toB = normalize(modelPositionB - modelPosition.xyz);\n    vec3 computedNormal = cross(toA, toB);\n\n    // Final position\n    vec4 viewPosition = viewMatrix * modelPosition;\n    vec4 projectedPosition = projectionMatrix * viewPosition;\n    gl_Position = projectedPosition;\n\n    // Varyings\n    vElevation = elevation;\n    vNormal = computedNormal;\n    vPosition = modelPosition.xyz;\n}","uniform vec3 uDepthColor;\nuniform vec3 uSurfaceColor;\nuniform float uColorOffset;\nuniform float uColorMultiplier;\n\nvarying float vElevation;\nvarying vec3 vNormal;\nvarying vec3 vPosition;\n\n#include ../includes/ambientLight.glsl\n#include ../includes/directionalLight.glsl\n#include ../includes/pointLight.glsl\n\nvoid main()\n{\n    vec3 viewDirection = normalize(vPosition - cameraPosition);\n    vec3 normal = normalize(vNormal);\n\n    float mixStrength = (vElevation + uColorOffset) * uColorMultiplier;\n    mixStrength = smoothstep(0.0, 1.0, mixStrength);\n    vec3 color = mix(uDepthColor, uSurfaceColor, mixStrength);\n\n    vec3 light = vec3(0.0);\n    light += pointLight(\n        vec3(1.0),\n        0.04,\n        normal,\n        vec3(0.0,0.25, 0.0),\n        viewDirection,\n        30.0,\n        vPosition,\n        0.1\n    );\n    light += pointLight(\n        vec3(1.0),\n        1.15,\n        normal,\n        vec3(0.0,0.25, 0.0),\n        viewDirection,\n        30.0,\n        vPosition,\n        0.15\n    );\n    light += pointLight(\n        vec3(1.0),\n        10.0,\n        normal,\n        vec3(0.0,0.25, 0.0),\n        viewDirection,\n        30.0,\n        vPosition,\n        0.25\n    );\n    \n    color *= light;\n    \n    gl_FragColor = vec4(color, 1.0);\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n}","// CustomShaderMaterial.js\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls, Float, Text, useGLTF, shaderMaterial, Sky } from '@react-three/drei'\r\nimport { useMemo, useState, useRef,} from 'react'\r\nimport { useFrame, extend } from '@react-three/fiber'\r\nimport testVertexShader from './vertex.glsl'\r\nimport testFragmentShader from './fragment.glsl'\r\nimport { useControls } from \"leva\";\r\nimport { useThree } from \"@react-three/fiber\";\r\n\r\n\r\nexport default function ragingSea() {\r\n    \r\n    document.body.style.backgroundColor = \"#000000\"    \r\n\r\n    const mesh = useRef()\r\n    const renderer = useThree((state) => state.gl)\r\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n    const controls = useControls({\r\n        uDepthColor:'#ff4000',\r\n        uSurfaceColor:'#151c37',\r\n\r\n        uBigWavesElevation:\r\n        {\r\n            // value: 0.2,\r\n            value: 0.9,\r\n            min: 0,\r\n            max: 1,\r\n            step:0.1\r\n        },\r\n        uBigWavesFrequency:\r\n        {\r\n            // value:new THREE.Vector2(4, 1.5),\r\n            // value:new THREE.Vector2(0.333, 0.125),\r\n            value:new THREE.Vector2(0.6, 0.25),\r\n        },\r\n        uBigWavesSpeed:\r\n        {\r\n            // value:0.75,\r\n            value:0.4,\r\n            min: 0,\r\n            max: 10,\r\n            step:0.1\r\n        },\r\n\r\n        uSmallWavesElevation: { value: 0.15 },\r\n        uSmallWavesFrequency: { value: 3 },\r\n        uSmallWavesSpeed: { value: 0.2 },\r\n        uSmallIterations: { value: 4 },\r\n\r\n        uColorOffset: {value: 0.925, step: 0.001},\r\n        uColorMultiplier: {value: 1.0, step: 0.001},\r\n        \r\n    })\r\n   console.log(controls);\r\n   \r\n    useFrame((state, delta) => {\r\n        shaderMaterial.uniforms.uTime.value = state.clock.elapsedTime;\r\n    })\r\n    const textureLoader = new THREE.TextureLoader()\r\n    const flagTexture = textureLoader.load('/textures/can-flag.jpg')\r\n\r\n    const shaderMaterial = new THREE.ShaderMaterial({\r\n        vertexShader: testVertexShader,\r\n        fragmentShader: testFragmentShader,\r\n        side: THREE.DoubleSide,\r\n        // wireframe:true ,\r\n        uniforms:\r\n        {\r\n            \r\n            // uFrequency: { value: new THREE.Vector2(10, 7) },\r\n            uTime: { value: 0 },\r\n            // uColor: { value: new THREE.Color('orange') },\r\n            // uTexture: { value: flagTexture },\r\n            uBigWavesElevation: {value: controls.uBigWavesElevation},\r\n            uBigWavesFrequency: {value: controls.uBigWavesFrequency},\r\n            uBigWavesSpeed: {value: controls.uBigWavesSpeed},\r\n            uDepthColor: {value: new THREE.Color(controls.uDepthColor)},\r\n            uSurfaceColor: {value: new THREE.Color(controls.uSurfaceColor)},\r\n            uColorOffset: {value:controls.uColorOffset},\r\n            uColorMultiplier: {value:controls.uColorMultiplier},\r\n            uSmallWavesElevation: {value:controls.uSmallWavesElevation },\r\n            uSmallWavesFrequency: { value:controls.uSmallWavesFrequency  },\r\n            uSmallWavesSpeed: {  value:controls.uSmallWavesSpeed},\r\n            uSmallIterations: { value:controls.uSmallIterations },\r\n        }\r\n    })\r\n    const geometry = new THREE.PlaneGeometry(2,2, 512, 512)\r\n    geometry.deleteAttribute('normal');\r\n    geometry.deleteAttribute('uv');\r\n\r\n    extend({ shaderMaterial });\r\n\r\n    return <>\r\n        {/* <axesHelper /> */}\r\n        \r\n        <mesh\r\n            geometry={geometry}\r\n            material={shaderMaterial}\r\n            useRef={mesh}\r\n            rotation={[Math.PI / 2, 0, 0]}\r\n            position={[0, 0, 0]}\r\n            scale={14} \r\n>\r\n        </mesh>\r\n            \r\n        \r\n    </>\r\n}\r\n\r\n\r\n"],"names":["vertex_default","fragment_default","ragingSea","mesh","useRef","renderer","useThree","state","THREE.ACESFilmicToneMapping","controls","useControls","THREE.Vector2","useFrame","delta","shaderMaterial","THREE.TextureLoader","THREE.ShaderMaterial","testVertexShader","testFragmentShader","THREE.DoubleSide","THREE.Color","geometry","THREE.PlaneGeometry","extend","jsx","Fragment"],"mappings":"gwBC,GAAY,CAEvB,SAAA,KAAK,MAAM,gBAAkB,UAEtC,MAAMC,EAAOC,EAAAA,OAAO,EACdC,EAAWC,EAAUC,GAAUA,EAAM,EAAE,EAC7CF,EAAS,YAAcG,EACvB,MAAMC,EAAWC,EAAY,CACzB,YAAY,UACZ,cAAc,UAEd,mBACA,CAEI,MAAO,GACP,IAAK,EACL,IAAK,EACL,KAAK,EACT,EACA,mBACA,CAGI,MAAM,IAAIC,EAAc,GAAK,GAAI,CACrC,EACA,eACA,CAEI,MAAM,GACN,IAAK,EACL,IAAK,GACL,KAAK,EACT,EAEA,qBAAsB,CAAE,MAAO,GAAK,EACpC,qBAAsB,CAAE,MAAO,CAAE,EACjC,iBAAkB,CAAE,MAAO,EAAI,EAC/B,iBAAkB,CAAE,MAAO,CAAE,EAE7B,aAAc,CAAC,MAAO,KAAO,KAAM,IAAK,EACxC,iBAAkB,CAAC,MAAO,EAAK,KAAM,IAAK,CAAA,CAE7C,EACF,QAAQ,IAAIF,CAAQ,EAEVG,EAAA,CAACL,EAAOM,IAAU,CACvBC,EAAe,SAAS,MAAM,MAAQP,EAAM,MAAM,WAAA,CACrD,EACqB,IAAIQ,EAAoB,EACZ,KAAK,wBAAwB,EAEzDD,MAAAA,EAAiB,IAAIE,EAAqB,CAC5C,aAAcC,EACd,eAAgBC,EAChB,KAAMC,EAEN,SACA,CAGI,MAAO,CAAE,MAAO,CAAE,EAGlB,mBAAoB,CAAC,MAAOV,EAAS,kBAAkB,EACvD,mBAAoB,CAAC,MAAOA,EAAS,kBAAkB,EACvD,eAAgB,CAAC,MAAOA,EAAS,cAAc,EAC/C,YAAa,CAAC,MAAO,IAAIW,EAAYX,EAAS,WAAW,CAAC,EAC1D,cAAe,CAAC,MAAO,IAAIW,EAAYX,EAAS,aAAa,CAAC,EAC9D,aAAc,CAAC,MAAMA,EAAS,YAAY,EAC1C,iBAAkB,CAAC,MAAMA,EAAS,gBAAgB,EAClD,qBAAsB,CAAC,MAAMA,EAAS,oBAAqB,EAC3D,qBAAsB,CAAE,MAAMA,EAAS,oBAAsB,EAC7D,iBAAkB,CAAG,MAAMA,EAAS,gBAAgB,EACpD,iBAAkB,CAAE,MAAMA,EAAS,gBAAiB,CAAA,CACxD,CACH,EACKY,EAAW,IAAIC,EAAoB,EAAE,EAAG,IAAK,GAAG,EACtD,OAAAD,EAAS,gBAAgB,QAAQ,EACjCA,EAAS,gBAAgB,IAAI,EAEtBE,EAAA,CAAE,eAAAT,EAAgB,EAKrBU,MAAAC,EAAAA,SAAA,CAAA,SAAAD,EAAA,IAAC,OAAA,CACG,SAAAH,EACA,SAAUP,EACV,OAAQX,EACR,SAAU,CAAC,KAAK,GAAK,EAAG,EAAG,CAAC,EAC5B,SAAU,CAAC,EAAG,EAAG,CAAC,EAClB,MAAO,EAAA,CAAA,EAKf,CACJ"}