{"version":3,"file":"shader-BkKUD7MO.js","sources":["../../node_modules/three-stdlib/objects/Sky.js","../../node_modules/@react-three/drei/core/Sky.js","../../src/shaders/fireworks/fragment.glsl","../../src/shaders/fireworks/vertex.glsl","../../node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/uuid/dist/esm-browser/native.js","../../node_modules/uuid/dist/esm-browser/v4.js","../../src/shaders/fireworks/shader.jsx"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Vector3, ShaderMaterial, UniformsUtils, BackSide, Mesh, BoxGeometry } from \"three\";\nimport { version } from \"../_polyfill/constants.js\";\nconst SkyShader = {\n  uniforms: {\n    turbidity: { value: 2 },\n    rayleigh: { value: 1 },\n    mieCoefficient: { value: 5e-3 },\n    mieDirectionalG: { value: 0.8 },\n    sunPosition: { value: new Vector3() },\n    up: { value: new Vector3(0, 1, 0) }\n  },\n  vertexShader: (\n    /* glsl */\n    `\n      uniform vec3 sunPosition;\n      uniform float rayleigh;\n      uniform float turbidity;\n      uniform float mieCoefficient;\n      uniform vec3 up;\n\n      varying vec3 vWorldPosition;\n      varying vec3 vSunDirection;\n      varying float vSunfade;\n      varying vec3 vBetaR;\n      varying vec3 vBetaM;\n      varying float vSunE;\n\n      // constants for atmospheric scattering\n      const float e = 2.71828182845904523536028747135266249775724709369995957;\n      const float pi = 3.141592653589793238462643383279502884197169;\n\n      // wavelength of used primaries, according to preetham\n      const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );\n      // this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\n      // (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\n      const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );\n\n      // mie stuff\n      // K coefficient for the primaries\n      const float v = 4.0;\n      const vec3 K = vec3( 0.686, 0.678, 0.666 );\n      // MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\n      const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );\n\n      // earth shadow hack\n      // cutoffAngle = pi / 1.95;\n      const float cutoffAngle = 1.6110731556870734;\n      const float steepness = 1.5;\n      const float EE = 1000.0;\n\n      float sunIntensity( float zenithAngleCos ) {\n        zenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );\n        return EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );\n      }\n\n      vec3 totalMie( float T ) {\n        float c = ( 0.2 * T ) * 10E-18;\n        return 0.434 * c * MieConst;\n      }\n\n      void main() {\n\n        vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n        vWorldPosition = worldPosition.xyz;\n\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        gl_Position.z = gl_Position.w; // set z to camera.far\n\n        vSunDirection = normalize( sunPosition );\n\n        vSunE = sunIntensity( dot( vSunDirection, up ) );\n\n        vSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );\n\n        float rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );\n\n      // extinction (absorbtion + out scattering)\n      // rayleigh coefficients\n        vBetaR = totalRayleigh * rayleighCoefficient;\n\n      // mie coefficients\n        vBetaM = totalMie( turbidity ) * mieCoefficient;\n\n      }\n    `\n  ),\n  fragmentShader: (\n    /* glsl */\n    `\n      varying vec3 vWorldPosition;\n      varying vec3 vSunDirection;\n      varying float vSunfade;\n      varying vec3 vBetaR;\n      varying vec3 vBetaM;\n      varying float vSunE;\n\n      uniform float mieDirectionalG;\n      uniform vec3 up;\n\n      const vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );\n\n      // constants for atmospheric scattering\n      const float pi = 3.141592653589793238462643383279502884197169;\n\n      const float n = 1.0003; // refractive index of air\n      const float N = 2.545E25; // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)\n\n      // optical length at zenith for molecules\n      const float rayleighZenithLength = 8.4E3;\n      const float mieZenithLength = 1.25E3;\n      // 66 arc seconds -> degrees, and the cosine of that\n      const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;\n\n      // 3.0 / ( 16.0 * pi )\n      const float THREE_OVER_SIXTEENPI = 0.05968310365946075;\n      // 1.0 / ( 4.0 * pi )\n      const float ONE_OVER_FOURPI = 0.07957747154594767;\n\n      float rayleighPhase( float cosTheta ) {\n        return THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );\n      }\n\n      float hgPhase( float cosTheta, float g ) {\n        float g2 = pow( g, 2.0 );\n        float inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );\n        return ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );\n      }\n\n      void main() {\n\n        vec3 direction = normalize( vWorldPosition - cameraPos );\n\n      // optical length\n      // cutoff angle at 90 to avoid singularity in next formula.\n        float zenithAngle = acos( max( 0.0, dot( up, direction ) ) );\n        float inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );\n        float sR = rayleighZenithLength * inverse;\n        float sM = mieZenithLength * inverse;\n\n      // combined extinction factor\n        vec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );\n\n      // in scattering\n        float cosTheta = dot( direction, vSunDirection );\n\n        float rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );\n        vec3 betaRTheta = vBetaR * rPhase;\n\n        float mPhase = hgPhase( cosTheta, mieDirectionalG );\n        vec3 betaMTheta = vBetaM * mPhase;\n\n        vec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );\n        Lin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );\n\n      // nightsky\n        float theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]\n        float phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]\n        vec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );\n        vec3 L0 = vec3( 0.1 ) * Fex;\n\n      // composition + solar disc\n        float sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );\n        L0 += ( vSunE * 19000.0 * Fex ) * sundisk;\n\n        vec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );\n\n        vec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );\n\n        gl_FragColor = vec4( retColor, 1.0 );\n\n      #include <tonemapping_fragment>\n      #include <${version >= 154 ? \"colorspace_fragment\" : \"encodings_fragment\"}>\n\n      }\n    `\n  )\n};\nconst material = new ShaderMaterial({\n  name: \"SkyShader\",\n  fragmentShader: SkyShader.fragmentShader,\n  vertexShader: SkyShader.vertexShader,\n  uniforms: UniformsUtils.clone(SkyShader.uniforms),\n  side: BackSide,\n  depthWrite: false\n});\nclass Sky extends Mesh {\n  constructor() {\n    super(new BoxGeometry(1, 1, 1), material);\n  }\n}\n__publicField(Sky, \"SkyShader\", SkyShader);\n__publicField(Sky, \"material\", material);\nexport {\n  Sky\n};\n//# sourceMappingURL=Sky.js.map\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Sky as Sky$1 } from 'three-stdlib';\nimport { Vector3 } from 'three';\n\nfunction calcPosFromAngles(inclination, azimuth, vector = new Vector3()) {\n  const theta = Math.PI * (inclination - 0.5);\n  const phi = 2 * Math.PI * (azimuth - 0.5);\n  vector.x = Math.cos(phi);\n  vector.y = Math.sin(theta);\n  vector.z = Math.sin(phi);\n  return vector;\n}\nconst Sky = /* @__PURE__ */React.forwardRef(({\n  inclination = 0.6,\n  azimuth = 0.1,\n  distance = 1000,\n  mieCoefficient = 0.005,\n  mieDirectionalG = 0.8,\n  rayleigh = 0.5,\n  turbidity = 10,\n  sunPosition = calcPosFromAngles(inclination, azimuth),\n  ...props\n}, ref) => {\n  const scale = React.useMemo(() => new Vector3().setScalar(distance), [distance]);\n  const [sky] = React.useState(() => new Sky$1());\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: sky,\n    ref: ref,\n    \"material-uniforms-mieCoefficient-value\": mieCoefficient,\n    \"material-uniforms-mieDirectionalG-value\": mieDirectionalG,\n    \"material-uniforms-rayleigh-value\": rayleigh,\n    \"material-uniforms-sunPosition-value\": sunPosition,\n    \"material-uniforms-turbidity-value\": turbidity,\n    scale: scale\n  }, props));\n});\n\nexport { Sky, calcPosFromAngles };\n","uniform sampler2D uTexture;\r\nuniform vec3 uColor ;\r\nvoid main()\r\n{\r\n    float textureAlpha = texture(uTexture, gl_PointCoord).r;\r\n    vec4 textureColor = texture(uTexture, gl_PointCoord);\r\n\r\n    //final color \r\n    gl_FragColor = vec4(uColor, textureAlpha);\r\n    // gl_FragColor = textureColor;\r\n    #include <tonemapping_fragment>\r\n    #include <colorspace_fragment>\r\n}","\r\nuniform float uSize;\r\nuniform vec2 uResolution;\r\nuniform float uProgress;\r\n\r\nattribute float aSize;\r\nattribute float aTimeMultiplayer;\r\nfloat remap(float value, float originMin, float originMax, float destinationMin, float destinationMax)\r\n{\r\n    return destinationMin + (value - originMin) * (destinationMax - destinationMin) / (originMax - originMin);\r\n}\r\n\r\nvoid main(){\r\n    float progress = uProgress * aTimeMultiplayer;\r\n    vec3 newPosition = position;\r\n    \r\n    //explosion\r\n    float explodingProgress = remap(progress, 0.0, 1.0, 0.0, 1.5);\r\n    explodingProgress = clamp(explodingProgress, 0.0, 1.0);\r\n    explodingProgress = 1.0 - pow(1.0 - explodingProgress, 3.0);\r\n    newPosition *= explodingProgress;\r\n\r\n    //falling \r\n    float fallingProgress = remap(progress, 0.1, 1.0, 0.0, 1.0);\r\n    fallingProgress = clamp(fallingProgress, 0.0, 1.0);\r\n    fallingProgress = 1.0 - pow(1.0 - fallingProgress, 3.0);\r\n    newPosition.y -= fallingProgress * 0.3;\r\n\r\n    //scale \r\n    float sizeOpeningProgress = remap(progress, 0.0, 0.125,0.0,1.0);\r\n    float sizeClosingProgress = remap(progress,0.125, 1.125,1.0, 0.0);         \r\n    float sizeProgress = min(sizeOpeningProgress, sizeClosingProgress);\r\n\r\n    //twinkling \r\n    float twinklingProgress = remap(progress, 0.0, 0.125,0.0,1.0);\r\n    twinklingProgress= clamp(twinklingProgress, 0.0, 1.0);\r\n    float sizeTwinkling = sin(progress * 30.0) * 0.5 + 0.5; \r\n    sizeTwinkling = 1.0 - sizeTwinkling * twinklingProgress;\r\n\r\n    //final position \r\n    vec4 modelPosition = modelMatrix * vec4(newPosition, 1.0) ;\r\n    vec4 viewPosition = viewMatrix * modelPosition;\r\n    gl_Position = projectionMatrix * viewPosition;\r\n\r\n    // Final size\r\n    gl_PointSize = uSize * uResolution.y * aSize * sizeProgress * sizeTwinkling;\r\n    gl_PointSize *= 1.0 / -viewPosition.z; //perspective\r\n    \r\n    if(gl_PointSize<1.0)\r\n        gl_Position= vec4(9999.9);\r\n}","import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n","import * as THREE from \"three\";\r\nimport { useThree } from \"@react-three/fiber\";\r\nimport fragmentShader from \"./fragment.glsl\";\r\nimport vertexShader from \"./vertex.glsl\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport gsap from \"gsap\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Sky } from \"@react-three/drei\";\r\n\r\n\r\nexport default function Fireworks() {\r\n  let fireworkCounter = 1\r\n  const [fireworks, setFireworks] = useState([]);\r\n  const { camera } = useThree();\r\n \r\n  const textureLoader = new THREE.TextureLoader();\r\n  useEffect(() => {\r\n  const handleClick = () => {\r\n    setFireworks([]); // clear previous fireworks\r\n    for(let i=0; i<fireworkCounter; i++){\r\n      createRandomFirework();\r\n    }\r\n    fireworkCounter *=2;\r\n    if(fireworkCounter == 40)fireworkCounter = 0\r\n  };\r\n\r\n  window.addEventListener(\"click\", handleClick);\r\n\r\n  return () => {\r\n    window.removeEventListener(\"click\", handleClick); // cleanup\r\n  }; \r\n}, []);\r\n  const textures = [\r\n    textureLoader.load(\"./textures/particles/1.png\"),\r\n    textureLoader.load(\"./textures/particles/2.png\"),\r\n    textureLoader.load(\"./textures/particles/3.png\"),\r\n    textureLoader.load(\"./textures/particles/4.png\"),\r\n    textureLoader.load(\"./textures/particles/5.png\"),\r\n    textureLoader.load(\"./textures/particles/6.png\"),\r\n    textureLoader.load(\"./textures/particles/7.png\"),\r\n    textureLoader.load(\"./textures/particles/8.png\"),\r\n  ];\r\n  const createFirework = (count, position, size, texture, radius, color) => {\r\n    const positions = new Float32Array(count * 3);\r\n    const sizesArray = new Float32Array(count);\r\n    const timeMultiplayersArray = new Float32Array(count);\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      const i3 = i * 3;\r\n\r\n      const spherical = new THREE.Spherical(\r\n        radius * (0.75 + Math.random() * 0.25),\r\n        Math.random() * Math.PI,\r\n        Math.random() * Math.PI * 2\r\n      );\r\n      const position = new THREE.Vector3();\r\n      position.setFromSpherical(spherical);\r\n      positions[i3] = position.x;\r\n      positions[i3 + 1] = position.y;\r\n      positions[i3 + 2] = position.z;\r\n\r\n      sizesArray[i] = Math.random();\r\n\r\n      timeMultiplayersArray[i] = 1 + Math.random();\r\n    }\r\n\r\n    //material\r\n    // texture.flipY = false\r\n    const material = new THREE.ShaderMaterial({\r\n      vertexShader: vertexShader,\r\n      fragmentShader: fragmentShader,\r\n      transparent: true,\r\n      depthFunc: false,\r\n      blending: THREE.AdditiveBlending,\r\n      uniforms: {\r\n        uSize: new THREE.Uniform(size),\r\n        uResolution: new THREE.Uniform(\r\n          new THREE.Vector2(window.innerWidth, window.innerHeight)\r\n        ),\r\n        uTexture: new THREE.Uniform(texture),\r\n        uColor: new THREE.Uniform(color),\r\n        uProgress: new THREE.Uniform(0),\r\n      },\r\n    });\r\n    //geometry\r\n    const geometry = new THREE.BufferGeometry();\r\n    geometry.setAttribute(\"position\", new THREE.BufferAttribute(positions, 3));\r\n    geometry.setAttribute(\"aSize\", new THREE.BufferAttribute(sizesArray, 1));\r\n    geometry.setAttribute(\r\n      \"aTimeMultiplayer\",\r\n      new THREE.BufferAttribute(timeMultiplayersArray, 1)\r\n    );\r\n\r\n    const id = uuidv4();\r\n    setFireworks((prev) => [\r\n      ...prev,\r\n      { position, positions, sizesArray, material, geometry, id },\r\n    ]);\r\n\r\n    gsap.to(material.uniforms.uProgress, {\r\n      value: 1,\r\n      duration: 3,\r\n      ease: \"linear\",\r\n      onComplete: () => destroy(id),\r\n    });\r\n    const destroy = (id) => {\r\n      setFireworks((prev) => {\r\n        const fw = prev.find((fw) => fw.id === id);\r\n        if (fw) {\r\n          fw.material.dispose();\r\n          fw.geometry.dispose();\r\n        }\r\n        return prev.filter((fw) => fw.id !== id);\r\n      });\r\n    };\r\n  };\r\n  const createRandomFirework = () => {\r\n    console.log(fireworks);\r\n\r\n    const count = Math.round(400 + Math.random() * 3000);\r\n    const position = new THREE.Vector3(\r\n      (Math.random() - 0.5) * 8,\r\n     (Math.random() - 0.5) * 8,\r\n      (Math.random() - 0.5) * 8\r\n    );\r\n    const size = 0.1 + Math.random() * 0.1;\r\n    const texture = textures[Math.floor(Math.random() * textures.length)];\r\n    const radius = 0.5 + Math.random();\r\n    const color = new THREE.Color();\r\n    color.setHSL(Math.random(), 1, 0.7);\r\n    createFirework(count, position, size, texture, radius, color);\r\n  };\r\n  const sunsetSky =  \r\n    {\r\n        PositionX : 0, PositionY:  0.5, PositionZ:  0,\r\n        Azimuth:  0, Elevation: -2.2, Distance:  450000,\r\n        Inclination:  0.5, mieCoefficient:  0.005, mieDirectionalG:  0.95,\r\n        rayleigh:  3, turbidity: 10, Exposure: THREE.CineonToneMapping, \r\n    }\r\n  return (\r\n    <>\r\n      <Sky \r\n            inclination={sunsetSky.Inclination}\r\n            azimuth={sunsetSky.Azimuth}\r\n             distance={sunsetSky.Distance}\r\n             mieCoefficient = {sunsetSky.mieCoefficient}\r\n             mieDirectionalG = {sunsetSky.mieDirectionalG}\r\n             rayleigh = {sunsetSky.rayleigh}\r\n             turbidity = {sunsetSky.turbidity}\r\n             exposure = {sunsetSky.Exposure}\r\n        />\r\n      {fireworks.map((fw, idx) => (\r\n        <points\r\n          key={idx}\r\n          material={fw.material}\r\n          geometry={fw.geometry}\r\n          position={fw.position}\r\n        >\r\n          {/* <bufferGeometry >\r\n            <bufferAttribute\r\n              position={fw.position}\r\n              attach=\"attributes-position\"\r\n              array={fw.positions}\r\n              count={fw.positions.length / 3}\r\n              itemSize={3}\r\n            />\r\n            <bufferAttribute\r\n              attach=\"attributes-aSize\"\r\n              array={fw.sizesArray}\r\n              count={fw.sizesArray.length}\r\n              itemSize={1}\r\n            />\r\n          </bufferGeometry> */}\r\n          {/* <pointsMaterial color=\"orange\" size={0.05} /> */}\r\n        </points>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n"],"names":["__defProp","__defNormalProp","obj","key","value","__publicField","SkyShader","Vector3","version","material","ShaderMaterial","UniformsUtils","BackSide","Mesh","BoxGeometry","Sky","calcPosFromAngles","inclination","azimuth","vector","theta","phi","React.forwardRef","distance","mieCoefficient","mieDirectionalG","rayleigh","turbidity","sunPosition","props","ref","scale","React.useMemo","sky","React.useState","Sky$1","React.createElement","_extends","fragment_default","vertex_default","byteToHex","i","unsafeStringify","arr","offset","getRandomValues","rnds8","rng","randomUUID","native","v4","options","buf","rnds","Fireworks","fireworkCounter","fireworks","setFireworks","useState","useThree","textureLoader","THREE.TextureLoader","useEffect","handleClick","createRandomFirework","textures","createFirework","count","position","size","texture","radius","color","positions","sizesArray","timeMultiplayersArray","i3","spherical","THREE.Spherical","THREE.Vector3","THREE.ShaderMaterial","vertexShader","fragmentShader","THREE.AdditiveBlending","THREE.Uniform","THREE.Vector2","geometry","THREE.BufferGeometry","THREE.BufferAttribute","id","uuidv4","prev","gsap","destroy","fw","THREE.Color","sunsetSky","THREE.CineonToneMapping","jsxs","Fragment","jsx","idx"],"mappings":"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","x_google_ignoreList":[0,1,4,5,6,7]}